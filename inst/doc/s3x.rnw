%\VignetteIndexEntry{Enhanced S3 Programming}
\documentclass{article}
\usepackage{maia4}
\SweaveOpts{keep.source=TRUE}
\SweaveOpts{prefix.string=tmp-ofp}
\begin{document}

<<echo=false>>=
options(width=72,prompt="R> ",continue="   ")
options(SweaveHooks=list(fig=function() par(mar=c(3.9, 4.1, 0.4, 0.1),cex=0.75)))
@

\mtitle {s3x}{0.9.2}{Enhanced S3 Programming\\(Rough Draft)}

\mabstract {An R package for enhanced S3 programming, including: Redefinitions of most base/graphics generics (without object/x as their first argument); Enhanced functions (for object-functional programming, mixing object oriented programming with functional programming); Other related utility functions.}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section* {Introduction}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
This is an intentionally minimalistic R package.

Roughly speaking, R has two major language systems for object oriented programming, generally referred to as ``S3'' and ``S4''.

In principle, this package tries to enhance R's S3 system, which, in my personal opinion, is incomplete. However, it's fair to say, that this package has largely evolved, to meet the needs of the author's other packages.

Roughly speaking, this package has six parts:
\begin {enumerate}
	\item	Redefinitions of most base/graphics generics.\\
			\textit {This is essential, for S3 to support object oriented models.}
	\item	Utility function, for extending class attributes.
	\item	Enhanced functions.
	\item	Enhanced function plots.
	\item	Utility functions, for reading package/file data.
	\item	Utility function, for deterministic sampling.
\end {enumerate}

Re-iterating, this is an intentionally minimalistic R package.\\
A previous mistake of the author, was over diversifying.

Arguably, S3 could be enhanced in many other ways.

There's a need for enhanced vectors.\\
However, if there's enhanced vectors, then there's a need for enhanced matrices.

This results in a complexity explosion...

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section* {Getting Started}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Firstly, we need to load the package.

<<>>=
library (s3x)
@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section* {Generic Redefinitions}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Most generics from base and graphics have been redefined.

Here is an excerpt from the corresponding source file:
\begin {verbatim}
"all.equal" = function (...) base::"all.equal" (...)
"anyDuplicated" = function (...) base::"anyDuplicated" (...)
"as.array" = function (...) base::"as.array" (...)
"as.data.frame" = function (...) base::"as.data.frame" (...)
\end {verbatim}

By default, many S3 methods, must name their first argument ``object'' or ``x''.\\
Often this is highly inappropriate.\\
At least in an object oriented context, anyway.

After loading the s3x package, any corresponding S3 methods, can have whatever first argument they like.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section* {The ``extend'' Function}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
This function merely returns an object, with a concatenated class attribute.

See the Rd file for more information.

<<>>=
x = 0
x = extend (x, "my_super_class")
x = extend (x, "my_sub_class")
x
@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section* {Enhanced Function Objects}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Enhanced functions (or ``FUNCTION'' objects, capitalised), wrap standard function objects. The major difference, is that they provide an operator ``\$'', to access their attributes. Note that the operator can be used inside functions to read (however, not write) their attributes.

Enhanced functions are intended for what I refer to as ``Object-Functional Programming'', mixing object oriented programming with functional programming.

The major application of this is modelling interpolated functions.

Here's an example with a straight line.
<<>>=
straight_line = function (intercept, slope)
{	f_seed = function (x) .$intercept + .$slope * x
	f = FUNCTION (f_seed)
	f$intercept = intercept
	f$slope = slope
	f
}

f1 = straight_line (0, 1)

f1
f1$intercept
f1$slope

f2 = straight_line (1, 2)
f2$intercept
f2$slope
@

Note that at the time of writing, there's a error printing functions.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section* {Plotting Simple Functions}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
We can plot simple functions.

We need to either specify an xlim argument in the constructor or the plotting function.

After we have plotted one function, we can add others..
\begin {center}

<<fig=TRUE, width=4.5, height=2.5>>=
plot (f1, xlim=c (-5, 5) )
lines (f2, lty=2, xlim=c (-5, 5) )
@
\end {center}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section* {I/O Utility Functions}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
The functions ``read\_package\_data'' and ``read\_file\_data'' provide alternatives to existing I/O functions.
Note that the defaults assume a CSV (comma separated) file with a header row and don't enforce column names with valid syntax.

See the Rd file for more information.

<<>>=
args (read_package_data)
args (read_file_data)
@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section* {Deterministic Sampling}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
The functions ``deterministic\_sample'' and ``detsam'', primarily intended for using I/O functions within vignettes, simplify the process of printing the first n and last m rows of a ``data.frame'' or ``matrix''.

<<>>=
#default, first 3, last 3
detsam (cars)
#alternative, first two, last two
detsam (cars, 2)
#alternative, first two, last one
detsam (cars, 2, 1)
@

\end {document}





